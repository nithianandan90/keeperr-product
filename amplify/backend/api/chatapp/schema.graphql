enum UserType {
  CLIENT
  PARTNER
  MANAGER
}

enum AttachmentType {
  IMAGE
  VIDEO
  DOCUMENT
}

enum InvoiceStatus {
  PAID
  UNPAID
  OVERDUE
}

type Notifications @model @auth(rules: [{ allow: public }]) {
  id: ID!
  updateDetails: String!
  opened: Boolean
  createdAt: AWSDateTime!
  usersID: ID
    @index(
      name: "byUser"
      sortKeyFields: ["createdAt"]
      queryField: "listNotificationsByUser"
    )
  taskID: ID
    @index(
      name: "byTask"
      sortKeyFields: ["createdAt"]
      queryField: "listNotificationsByTask"
    )
}

type Properties @model @auth(rules: [{ allow: public }]) {
  id: ID!
  title: String!
  streetAddress: String!
  postcode: Int!
  city: String!
  state: String!
  headerPic: String
  type: String!
  physicalAccess: String
  status: String!
  active: Boolean
  Tasks: [Task] @hasMany(indexName: "byProperties", fields: ["id"])
  Tenants: [Tenants] @hasMany(indexName: "byProperties", fields: ["id"])
  Attachments: [Attachment] @hasMany(indexName: "byProperties", fields: ["id"])
  usersID: ID @index(name: "byUser")
}

type Task @model @auth(rules: [{ allow: public }]) {
  id: ID!
  status: String!
  startDate: AWSDateTime
  completionDate: AWSDateTime
  createdAt: AWSDateTime!
  title: String!
  subTitle: String!
  taskType: String!
  recurrence: String!
  active: Boolean
  ownerOnly: Boolean
  propertiesID: ID!
    @index(
      name: "byProperties"
      sortKeyFields: ["createdAt"]
      queryField: "listTasksByProperty"
    )
  usersID: ID @index(name: "byUser")
  TenantTasks: [TenantTasks] @hasMany(indexName: "byTask", fields: ["id"])
  Attachments: [Attachment] @hasMany(indexName: "byTask", fields: ["id"])
  Notifications: [Notifications] @hasMany(indexName: "byTask", fields: ["id"])
}

type Attachment @model @auth(rules: [{ allow: public }]) {
  id: ID!
  storageKey: String
  fileName: String
  createdAt: AWSDateTime!
  type: AttachmentType!
  width: Int
  height: Int
  duration: Int
  messageID: ID @index(name: "byMessage")
  chatroomID: ID @index(name: "byChatRoom")
  taskID: ID
    @index(
      name: "byTask"
      sortKeyFields: ["createdAt"]
      queryField: "listAttachmentsByTask"
    )
  propertiesID: ID @index(name: "byProperties")
  invoiceID: ID
    @index(
      name: "byInvoices"
      sortKeyFields: ["createdAt"]
      queryField: "listAttachmentsByInvoice"
    )
}

type ChatRoom @model @auth(rules: [{ allow: public }]) {
  id: ID!
  name: String
  image: String
  Messages: [Message] @hasMany(indexName: "byChatRoom", fields: ["id"])
  users: [User] @manyToMany(relationName: "UserChatRoom")
  Property: Properties @hasOne
  LastMessage: Message @hasOne
  Attachments: [Attachment] @hasMany(indexName: "byChatRoom", fields: ["id"])
}

type Message @model @auth(rules: [{ allow: public }]) {
  id: ID!
  createdAt: AWSDateTime!
  text: String
  chatroomID: ID!
    @index(
      name: "byChatRoom"
      sortKeyFields: ["createdAt"]
      queryField: "listMessagesByChatRoom"
    )
  userID: ID! @index(name: "byUser")
  images: [String]
  Attachments: [Attachment] @hasMany(indexName: "byMessage", fields: ["id"])
}

type User @model @auth(rules: [{ allow: public }]) {
  id: ID!
  createdAt: AWSDateTime!
  clientID: String
  name: String
  username: String
  email: AWSEmail
  telephone: AWSPhone
  status: String
  image: Attachment @hasOne
  firebaseToken: String
  ChatRooms: [ChatRoom] @manyToMany(relationName: "UserChatRoom")
  userType: UserType
    @index(
      name: "usersByDate"
      sortKeyFields: ["createdAt"]
      queryField: "listUsersByDate"
    )
  Tasks: [Task] @hasMany(indexName: "byUser", fields: ["id"])
  Notifications: [Notifications] @hasMany(indexName: "byUser", fields: ["id"])
  Properties: [Properties] @hasMany(indexName: "byUser", fields: ["id"])
  Invoices: [Invoices] @hasMany(indexName: "byUserInv", fields: ["id"])
  FirebaseTokens: [FirebaseTokens]
    @hasMany(indexName: "byTokens", fields: ["id"])
}

type Invoices @model @auth(rules: [{ allow: public }]) {
  id: ID!
  title: String!
  createdAt: AWSDateTime!
  invoiceNo: String
    @index(
      name: "invoicesByDate"
      sortKeyFields: ["createdAt"]
      queryField: "listInvoicesByDate"
    )

  discount: String
  additionalCharges: String
  invoiceAmount: String!
  active: Boolean
  tasks: AWSJSON
  userName: String
  userEmail: AWSEmail
  remarks: String
  usersID: ID @index(name: "byUserInv")
  status: InvoiceStatus
  Attachments: [Attachment] @hasMany(indexName: "byInvoices", fields: ["id"])
}

type FirebaseTokens @model @auth(rules: [{ allow: public }]) {
  id: ID!
  userType: UserType
  token: String
  usersID: ID @index(name: "byTokens")
}

type Tenants @model @auth(rules: [{ allow: public }]) {
  id: ID!
  propertiesID: ID @index(name: "byProperties")
  userID: String
  active: Boolean
}

type TenantTasks @model @auth(rules: [{ allow: public }]) {
  id: ID!
  taskID: ID @index(name: "byTask")
  userID: String
  active: Boolean
}
